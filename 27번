//27번
#include <iostream>
#include <queue> //큐 라이브러리
using namespace std;

static int dx[] = { 0,1,0,-1 };
static int dy[] = { 1,0,-1,0 };
static int A[101][101]; //데이터를 저장하는 2차원 배열
static bool visited[101][101] = { false }; //방문 기록 2차원 배열
static int N, M;
void BFS(int i, int j);

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M;

	for (int i; i < N; i++) { //배열 A에 데이터 저장, A는 depth저장하는 배열임
		string s;
		cin >> s;
		for (int j = 0; j < M; j++) {
			A[i][j] = s[j] - '0'; //string으로 입력된 수를 정수형으로 바꿔 줌
		}
	}

	BFS(0, 0);
	cout << A[N - 1][M - 1] << "\n";
}

void BFS(int i, int j) {
	queue<pair<int, int>> myqueue; //pair타입의 원소를 저장하는 myqueue 생성
	myqueue.push(make_pair(i, j)); //make_pair함수: pair 객체 생성

	while (!myqueue.empty()) { //empty() : queue가 비어있으면 true
		int now[2];
		now[0] = myqueue.front().first; //front() : queue 클래스의 멤버함수, 큐에서 첫 번째 요소를 가리키는 포인터를 반환
		now[1] = myqueue.front().second; // fisrt, second는 pair 객체의 멤버변수임
		myqueue.pop(); // pop() : queue에서 가장 앞에 있는 원소 제거
		visited[i][j] = true; //현재노드 방문기록

		for (int k = 0; k < 4; k++) { //상하좌우 탐색
			int x = now[0] + dx[k]; //dx[0]=0 부터 dx[3]=-1까지
			int y = now[1] + dy[k];

			if (x >= 0 && y >= 0 && x < N && y < M) { //유효한 좌표이면
				if (A[x][y] != 0 && !visited[x][y]) {
					visited[x][y] = true; //방문기록
					A[x][y] = A[now[0]][now[1]] + 1; //배열 A에 새롭게 이동한 노드의 depth를 현재 노드의 depth+1값으로 업데이트
					myqueue.push(make_pair(x, y)); // push() : queue에 요소를 추가하는 함수
				}
			}
		} //소개된 함수는 queue의 멤버함수로 <queue>라이브러리 혹은 queue클래스 검색하면 소개가 나온다!
	}
}
