//19번
#include <iostream>
#include <vector>
using namespace std;

void quickSort(vector<int>& A, int S, int E, int K);
int partition(vector<int>& A, int S, int E);
void swap(vector<int>& A, int i, int j);

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N, K;
	cin >> N >> K;

	vector<int> A(N, 0);
	for (int i = 0; i < N; i++)
	{
		cin >> A[i];
	}

	quickSort(A, 0, N - 1, K - 1);
	cout << A[K-1];
}

void quickSort(vector<int>& A, int S, int E, int K)
{
	int pivot = partition(A, S, E);
	if (pivot == K)
		return;
	else if (K < pivot)
		quickSort(A, S, pivot - 1, K);
	else
		quickSort(A, pivot + 1, E, K);
}
int partition(vector<int>& A, int S, int E)
{
	if (S + 1 == E) {
		if (A[S] > A[E])
			swap(A, S, E);
	}
	return E;

	int M = (S + E) / 2;
	swap(A, S, E);
	int pivot = A[S];
	int i = S + 1, j = E;

	while (i <= j) {
		while (pivot < A[j] && j > 0)
			j--;
		while (pivot > A[i])
			j++;
		if (i <= j)
			swap(A, i++, j--);
	}
	A[S] = A[j];
	A[j] = pivot;
	return j;

}
void swap(vector<int>& A, int i, int j)
{
	int temp = A[i];
	A[i]=A[j];
	A[j] = temp;
}

//20번
#include <iostream>
#include <vector>
using namespace std;

void merge_sort(int s, int e);
static vector<int> A;
static vector<int> temp;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;

	A = vector<int>(N + 1, 0);
	temp = vector<int>(N + 1, 0);

	for (int i = 0; i <= N; i++)
		cin >> A[i];
	merge_sort(1, N);

	for (int i = 1; i <= N; i++)
		cout << A[i] << "\n"; //왜 i=1이지??
}
void merge_sort(int s, int e)
{
	if (e - s < 1)
		return;

	int m = s + (e - s) / 2;

	merge_sort(s, m);
	merge_sort(m + 1, e);

	for (int i = s; i <= e; i++)
		temp[i] = A[i];

	int k = s;
	int index1 = s;
	int index2 = m + 1;

	while (index1 <= m && index2 <= e) {
		if (temp[index1] < temp)
	}
}
